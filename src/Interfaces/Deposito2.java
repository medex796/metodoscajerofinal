/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
/**
 * La clase Deposito2 define la interfaz de usuario para realizar depósitos en cuentas bancarias.
 * @author Jhonny
 */
public class Deposito2 extends javax.swing.JFrame {

    /**
     * Creates new form Deposito2
     */
    // Variables de clase
    public int numeroCuenta = 000; // Número de cuenta predeterminado
    public Principal principal = new Principal(); // Instancia de la clase Principal
    public boolean dolares = false; // Bandera para indicar si el depósito es en dólares
    public boolean bolivianos = false; // Bandera para indicar si el depósito es en bolivianos
    public String usuario = "null"; // Nombre de usuario predeterminado
    
    /**
     * Constructor de la clase sin parámetros.
     * Crea una nueva instancia de Deposito2 y establece su posición en el centro de la pantalla.
     */
    public Deposito2() {
        initComponents(); // Inicialización de componentes de la interfaz
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
    }
    /**
     * Constructor de la clase con parámetros.
     * Crea una nueva instancia de Deposito2 con el nombre de usuario, número de cuenta y tipo de moneda proporcionados.
     * Carga los datos de la cuenta desde el archivo.
     * 
     * @param name El nombre de usuario para el cual se realizará el depósito.
     * @param numerocuent El número de cuenta en el que se realizará el depósito.
     * @param dolar Indica si el depósito se realizará en dólares.
     * @param boliviano Indica si el depósito se realizará en bolivianos.
     */
    public Deposito2(String name, int numerocuent, boolean dolar, boolean boliviano) {
        initComponents(); // Inicialización de componentes de la interfaz
        this.usuario = name; // Establece el nombre de usuario
        this.bolivianos = boliviano; // Establece la bandera para indicar si el depósito es en bolivianos
        this.dolares = dolar; // Establece la bandera para indicar si el depósito es en dólares
        this.numeroCuenta = numerocuent; // Establece el número de cuenta
        cargar(); // Carga los datos de la cuenta desde el archivo
    }
    // metodo para cargar los datos de la cuenta desde el archivo
     public void cargar (){
       
       FileInputStream archivo = null; // variable para leer datos de un arcchivo txt 
        ObjectInputStream convertidorarchivo = null;// variable que permitira en este caso sacar datos del archivo txt 

        try {
            archivo = new FileInputStream("C://Metodos//Cajero.txt");//llama al constructor que permite leer el archivo donde le pasamos la unbicacion del archivo 
            convertidorarchivo = new ObjectInputStream(archivo);// llamamos al constructor que permitira sacar datos del archivo donde le pasamos el archivo de donde queremos sacar los datos
               
                principal= (Principal)convertidorarchivo.readObject(); //agregamos ala lista el objeto que sacamos del archivo txt 
             
        }catch (IOException ex){// excepcion que nos ayuda si no encuentra el archivo 
          
            File archivos = new File ("C://Metodos//Cajero.txt"); // SI NO ENCUENTRA EL ARCHIVO SE CREARA UN NUEVO ARCHIVO 
        }catch (ClassNotFoundException cnfe)//ndica que Java no puede encontrar una clase específica en tiempo de ejecución, lo que generalmente ocurre debido a problemas como errores en el nombre de la clase
                {
                    cnfe.printStackTrace();
                }
       
       
       
       }
     private void actualizarLista() {
        try {
           
            FileOutputStream ficherosalida =new FileOutputStream ("C://Metodos//Cajero.txt") ; 
            ObjectOutputStream  convertidor = new ObjectOutputStream (ficherosalida);
            
                convertidor.writeObject(principal);
            
            convertidor.close();
            ficherosalida.close();
        }catch (IOException ex){
            ex.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        txtDeposito = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Ingreso");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 180, 80, 30));

        jButton7.setBackground(new java.awt.Color(0, 51, 51));
        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("CONTINUAR ");
        jButton7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 260, -1, -1));

        txtDeposito.setBackground(new java.awt.Color(0, 51, 51));
        txtDeposito.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtDeposito.setForeground(new java.awt.Color(255, 255, 255));
        txtDeposito.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDepositoKeyTyped(evt);
            }
        });
        jPanel1.add(txtDeposito, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 180, 250, 30));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("SECCION DEPOSITOS");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, -1, -1));

        jButton1.setBackground(new java.awt.Color(0, 51, 51));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("REGRESAR");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 310, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pngwing.com (4).png"))); // NOI18N
        jLabel3.setText("jLabel3");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(-310, 0, -1, 410));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logf1nuevo.jpg"))); // NOI18N
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f3.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 420));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (dolares ){
            if(verificarDolar()){//verificar si la cuenta esta en dolares
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()));
                Historia(txtDeposito.getText());//aumentar el saldo

            }else{
                
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()) *( 6.91));//estamos asiendo la conversion con el dolar a 6.91
                Historia(redondear(Integer.parseInt(txtDeposito.getText()) * ( 6.91))+"");

            }

        }else if(bolivianos) {
            if (verificarDolar()){
                aumentarSaldo(Integer.parseInt(txtDeposito.getText())/6.91);//dividimos el monto en 6.91 porque la cuenta esta en bolibvianos
                Historia(redondear(Integer.parseInt(txtDeposito.getText())/6.91)+"");
            }else {
                
                aumentarSaldo(Integer.parseInt(txtDeposito.getText()));//aumentar el saldo
                    Historia((txtDeposito.getText())+"");
            }

        }
        actualizarLista();

        Finish ventana = new Finish (usuario,numeroCuenta);
        ventana.setVisible(true);
        ventana.setLocationRelativeTo(null);
        Factura factura = new Factura(usuario,numeroCuenta,"Deposito",Double.parseDouble(txtDeposito.getText()));
        factura.setVisible(true);
        factura.setLocationRelativeTo(null);

        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed
     public double redondear(double numero) {
        // Multiplica el número por 10^digitos para desplazar los dígitos decimales
        double factor = Math.pow(10, 3);
        double numeroMultiplicado = numero * factor;

        // Redondea al entero más cercano
        long parteEntera = Math.round(numeroMultiplicado);

        // Divide el resultado por 10^digitos para obtener el número redondeado
        return parteEntera / factor;
    }
     // Método para manejar el evento de tecla presionada en el campo de texto "txtDeposito"
    private void txtDepositoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepositoKeyTyped
        char c = evt.getKeyChar();
        if( c < '0'|| c>'9'  ) evt.consume();// Permite solo dígitos
        if (txtDeposito.getText().length() >= 4) evt.consume();// Limita la longitud máxima a 4 caracteres        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepositoKeyTyped
//boton regresar
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Menu ventana = new Menu (usuario, numeroCuenta);
        ventana.setVisible(true);
        ventana.setLocationRelativeTo(null);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Método para registrar la transacción de depósito en el historial
    public void Historia(String monto){
        LocalDateTime ahora = LocalDateTime.now(); // Obtiene la fecha y hora actual
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); // Formatea la fecha y hora
    String fechaYHoraActual = ahora.format(formatter); // Aplica el formato

    // Crea un objeto Historia con la fecha y hora actual, tipo de transacción, monto y saldo actual
    Historia historia = new Historia(fechaYHoraActual, "Deposito", "+" + monto, null, 000000, Double.toString(redondear(saldo(numeroCuenta))));
    agregarHistoria(historia); // Agrega la historia al historial
    
    }
    // Método para obtener el saldo de una cuenta
     public double saldo(int numerocuenta){
        double res = 0;
    if (principal.getListaCuenta() != null) {
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numerocuenta) {
                res = principal.getListaCuenta().get(i).getSaldo(); // Obtiene el saldo de la cuenta
                break;
            }
        }
    }
    return res;
    
    }
// Método para agregar una historia al historial de una cuenta
    public void agregarHistoria(Historia historia){
        for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) { // Encuentra la cuenta receptora
            principal.getListaCuenta().get(i).getListaHistoria().add(historia); // Agrega la historia al historial
            break;
                      
            }
        
        
        }
    
    
    }
    // Método para verificar si una cuenta está en dólares

    public boolean verificarDolar(){
        boolean res = false;
    for (int i = 0; principal.getListaCuenta().size() > i; i++) {
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) {
            if (principal.getListaCuenta().get(i).getMoneda().equals("Dolares")) { // Comprueba si la cuenta está en dólares
                res = true;
                break;
            }
        }
    }
    return res;
    
    
    }
    // Método para aumentar el saldo de una cuenta

    public void aumentarSaldo (double saldoDepositado){
    
        for (int i =0; principal.getListaCuenta().size()>i;i++){
            if(principal.getListaCuenta().get(i).getNumeroCuenta()==numeroCuenta){
                principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo () + saldoDepositado);//con esto aumenta el saldo
                    
                    break;
                
            
            }
        
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Deposito2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Deposito2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Deposito2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Deposito2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Deposito2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtDeposito;
    // End of variables declaration//GEN-END:variables
}
