/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaces;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
/**
 *
 * @author Jhonny
 */
public class Retiro extends javax.swing.JFrame {
    public Principal principal =new Principal ();
    public String usuario = "null";
     public int numeroCuenta=000;

    /**
     * Creates new form Retiro
     */
    public Retiro() {
        initComponents();
        setLocationRelativeTo(null);
    }
    /**
     * Constructor de la clase con parámetros.
     * @param name Nombre de usuario.
     * @param numerocuenta Número de cuenta.
     */
    public Retiro(String name,int numerocuenta){
        initComponents();
        this.usuario=name;
        this.numeroCuenta=numerocuenta;
        cargar();
    
    }
    /**
     * Método para cargar los datos desde el archivo.
     */
     public void cargar (){
       
       FileInputStream archivo = null; // variable para leer datos de un arcchivo txt 
        ObjectInputStream convertidorarchivo = null;// variable que permitira en este caso sacar datos del archivo txt 

        try {
            archivo = new FileInputStream("C://Metodos//Cajero.txt");//llama al constructor que permite leer el archivo donde le pasamos la unbicacion del archivo 
            convertidorarchivo = new ObjectInputStream(archivo);// llamamos al constructor que permitira sacar datos del archivo donde le pasamos el archivo de donde queremos sacar los datos
               
                principal= (Principal)convertidorarchivo.readObject(); //agregamos ala lista el objeto que sacamos del archivo txt 
             
        }catch (IOException ex){// excepcion que nos ayuda si no encuentra el archivo 
          
            File archivos = new File ("C://Metodos//Cajero.txt"); // SI NO ENCUENTRA EL ARCHIVO SE CREARA UN NUEVO ARCHIVO 
        }catch (ClassNotFoundException cnfe)//ndica que Java no puede encontrar una clase específica en tiempo de ejecución, lo que generalmente ocurre debido a problemas como errores en el nombre de la clase
                {
                    cnfe.printStackTrace();
                }
       
       
       
       }


/**
     * Método para actualizar la lista en el archivo.
     */
 private void actualizarLista() {
        try {
           
            // Abre un flujo de salida para escribir datos en un archivo llamado "Cajero.txt"
        FileOutputStream ficherosalida = new FileOutputStream("C://Metodos//Cajero.txt");

        // Crea un objeto ObjectOutputStream que se asocia con el flujo de salida para escribir objetos Java en el archivo
        ObjectOutputStream convertidor = new ObjectOutputStream(ficherosalida);

        // Escribe el objeto 'principal' en el archivo
        convertidor.writeObject(principal);

        // Cierra el ObjectOutputStream para liberar recursos y asegurar que todos los datos se escriban en el archivo
        convertidor.close();

        // Cierra el flujo de salida asociado para liberar recursos
        ficherosalida.close();
    } catch (IOException ex) {
        // Maneja cualquier excepción de entrada/salida imprimiendo el rastreo de la pila
        ex.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtRetiro = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 0, 102));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 900));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("INGRESE EL MONTO A RETIRAR");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 240, 280, 40));

        jLabel3.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("RETIRO");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, 140, 40));

        txtRetiro.setBackground(new java.awt.Color(0, 51, 51));
        txtRetiro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtRetiro.setForeground(new java.awt.Color(255, 255, 255));
        txtRetiro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRetiroActionPerformed(evt);
            }
        });
        txtRetiro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRetiroKeyTyped(evt);
            }
        });
        jPanel1.add(txtRetiro, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, 250, 40));

        jButton5.setBackground(new java.awt.Color(0, 51, 51));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("LISTO");
        jButton5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 390, 120, 30));

        jButton6.setBackground(new java.awt.Color(0, 51, 51));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("REGRESAR ");
        jButton6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 440, 180, -1));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("BANCO CACHUPIN");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, -1, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/logf1nuevo.jpg"))); // NOI18N
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 450, -1, -1));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pngwing.com (4).png"))); // NOI18N
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/f3.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 570));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtRetiroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRetiroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRetiroActionPerformed

    private void txtRetiroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRetiroKeyTyped
        // Método llamado cuando se presiona una tecla mientras el foco está en el campo de texto de retiro.
    // Captura la tecla presionada y verifica si es un número (dígitos del 0 al 9).
    // Si la tecla no es un número o la longitud del texto excede 4 caracteres, consume el evento, evitando que se escriba en el campo.
    char c = evt.getKeyChar();
    if (c < '0' || c > '9') // Verifica si la tecla presionada no es un dígito.
        evt.consume(); // Consume el evento para evitar que se escriba en el campo.
    if (txtRetiro.getText().length() >= 4) // Verifica si la longitud del texto en el campo excede 4 caracteres.
        evt.consume(); // Consume el evento para evitar que se escriba en el campo.:
    }//GEN-LAST:event_txtRetiroKeyTyped

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Método llamado cuando se hace clic en el botón "LISTO".
    // Verifica si el campo de texto de retiro no está vacío.
    // Si no está vacío, verifica si el monto ingresado es menor o igual al saldo disponible en la cuenta.
    // Si el monto es válido, resta el monto retirado del saldo, registra la transacción en el historial, actualiza la lista de cuentas,
    // muestra la ventana de "Finish" y una factura, y cierra la ventana actual.
    // Si el monto no es válido, muestra un mensaje de error.
    // Si el campo de texto está vacío, muestra un mensaje solicitando al usuario que ingrese un monto.
    if (!txtRetiro.getText().equals("")) { // Verifica si el campo de texto de retiro no está vacío.
        if (Double.parseDouble(txtRetiro.getText()) <= saldo(numeroCuenta)) { // Verifica si el monto ingresado es menor o igual al saldo disponible.
            restarSaldo(Double.parseDouble(txtRetiro.getText())); // Resta el monto retirado del saldo de la cuenta.
            LocalDateTime ahora = LocalDateTime.now(); // Obtiene la fecha y hora actual.
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"); // Crea un formateador de fecha y hora.
            String fechaYHoraActual = ahora.format(formatter); // Formatea la fecha y hora actual.
            Historia historia = new Historia(fechaYHoraActual, "Retiro", "-" + txtRetiro.getText(), null, 000000, redondear(saldo(numeroCuenta)) + ""); // Crea un objeto de historial de transacciones.
            agregarHistoria(historia); // Agrega la transacción al historial de la cuenta.
            actualizarLista(); // Actualiza la lista de cuentas en el archivo.
            Finish ventana = new Finish(usuario, numeroCuenta); // Crea una nueva ventana "Finish".
            ventana.setVisible(true); // Muestra la ventana "Finish".
            ventana.setLocationRelativeTo(null); // Centra la ventana en la pantalla.
            Factura factura = new Factura(usuario, numeroCuenta, "Retiro", Double.parseDouble(txtRetiro.getText())); // Crea una factura para el retiro.
            factura.setVisible(true); // Muestra la factura.
            factura.setLocationRelativeTo(null); // Centra la factura en la pantalla.
            dispose(); // Cierra la ventana actual.
        } else {
            JOptionPane.showMessageDialog(null, "saldo insuficiente ", "Error", JOptionPane.INFORMATION_MESSAGE); // Muestra un mensaje de saldo insuficiente.
        }
    } else {
        JOptionPane.showMessageDialog(null, "Ingrese el monto a retirar ", "Error", JOptionPane.INFORMATION_MESSAGE); // Muestra un mensaje solicitando al usuario que ingrese un monto.
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
     public double redondear(double numero) {
        // Este método redondea un número dado a tres decimales.
    // Multiplica el número por 10^3 para desplazar los dígitos decimales.
    // Luego, redondea al entero más cercano y divide el resultado por 10^3 para obtener el número redondeado.
    // Finalmente, devuelve el número redondeado.
    double factor = Math.pow(10, 3); // Calcula el factor de redondeo.
    double numeroMultiplicado = numero * factor; // Multiplica el número por el factor.
    long parteEntera = Math.round(numeroMultiplicado); // Redondea al entero más cercano.
    return parteEntera / factor; // Divide el resultado por el factor para obtener el número redondeado.
}
    public double saldo(int numerocuenta){
        // Este método devuelve el saldo de la cuenta especificada por el número de cuenta.
    double res = 0; // Variable para almacenar el saldo.
    if (principal.getListaCuenta() != null) { // Verifica si la lista de cuentas no es nula.
        for (int i = 0; i < principal.getListaCuenta().size(); i++) { // Itera sobre la lista de cuentas.
            if (principal.getListaCuenta().get(i).getNumeroCuenta() == numerocuenta) { // Comprueba si el número de cuenta coincide.
                res = principal.getListaCuenta().get(i).getSaldo(); // Obtiene el saldo de la cuenta.
                break; // Sale del bucle una vez que se encuentra el saldo.
            }
        }
    }
    return res; // Devuelve el saldo.
    
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // Método llamado cuando se hace clic en el botón "REGRESAR".
    // Crea una nueva ventana "Menu", la muestra, la centra en la pantalla y cierra la ventana actual.
    Menu ventana = new Menu(usuario, numeroCuenta); // Crea una nueva ventana "Menu".
    ventana.setVisible(true); // Muestra la ventana "Menu".
    ventana.setLocationRelativeTo(null); // Centra la ventana en la pantalla.
    dispose(); // Cierra la ventana actual.
    }//GEN-LAST:event_jButton6ActionPerformed
    public void agregarHistoria(Historia historia){
        // Este método agrega un objeto Historia al historial de la cuenta correspondiente.
    for (int i = 0; i < principal.getListaCuenta().size(); i++) { // Itera sobre la lista de cuentas.
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) { // Comprueba si el número de cuenta coincide.
            principal.getListaCuenta().get(i).getListaHistoria().add(historia); // Agrega la historia al historial de la cuenta.
            break; // Sale del bucle una vez que se agrega la historia.
                      
            }
        
        
        }
    
    
    }
    public void  restarSaldo (double saltoRetirado){
        // Este método resta el monto retirado del saldo de la cuenta correspondiente.
    for (int i = 0; i < principal.getListaCuenta().size(); i++) { // Itera sobre la lista de cuentas.
        if (principal.getListaCuenta().get(i).getNumeroCuenta() == numeroCuenta) { // Comprueba si el número de cuenta coincide.
            principal.getListaCuenta().get(i).setSaldo(principal.getListaCuenta().get(i).getSaldo() - saltoRetirado); // Resta el monto retirado del saldo.
            break; // Sale del bucle una vez que se resta el saldo.
            
            }
         
        }
    
    }
    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Retiro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Retiro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtRetiro;
    // End of variables declaration//GEN-END:variables
}
